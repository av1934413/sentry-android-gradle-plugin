package io.sentry.android.gradle.tasks

import io.sentry.android.gradle.SentryTasksProvider.capitalized
import io.sentry.android.gradle.extensions.SentryPluginExtension
import io.sentry.android.gradle.telemetry.SentryTelemetryService
import io.sentry.android.gradle.telemetry.withSentryTelemetry
import io.sentry.android.gradle.util.PropertiesUtil
import java.util.Properties
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.file.RegularFile
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.TaskProvider

@CacheableTask
abstract class CreateSentryMetaPropertiesTask : DefaultTask() {

    @get:OutputFile
    abstract val outputFile: RegularFileProperty

    // we only care about file contents
    @get:PathSensitive(PathSensitivity.NONE)
    @get:InputFiles
    abstract val inputPropertyFiles: ConfigurableFileCollection

    @TaskAction
    fun taskAction() {
        val outputFile = outputFile.get().asFile

        // ensure parent folder exists
        outputFile.parentFile.mkdirs()

        // merge props
        val props = Properties()
        props.setProperty("io.sentry.build-tool", "gradle")
        inputPropertyFiles.forEach { inputFile ->
            PropertiesUtil.loadMaybe(inputFile)?.let { props.putAll(it) }
        }

        // write props
        outputFile.writer().use {
            props.store(
                it,
                "Generated by sentry-android-gradle-plugin"
            )
        }
    }

    companion object {
        internal const val SENTRY_DEBUG_META_PROPERTIES_OUTPUT = "sentry-debug-meta.properties"

        fun register(
            project: Project,
            extension: SentryPluginExtension,
            sentryTelemetryProvider: Provider<SentryTelemetryService>?,
            tasksGeneratingProperties: List<TaskProvider<out PropertiesFileOutputTask>>,
            taskSuffix: String
        ): TaskProvider<CreateSentryMetaPropertiesTask> {
            val inputFiles: List<Provider<RegularFile>> = tasksGeneratingProperties.mapNotNull {
                it.flatMap { task -> task.outputFile }
            }
            return project.tasks.register(
                "createSentryDebugMetaProperties${taskSuffix.capitalized}",
                CreateSentryMetaPropertiesTask::class.java
            ) { task ->
                task.inputPropertyFiles.setFrom(inputFiles)
                task.outputFile.set(
                    project.buildDir.resolve(
                        "intermediates/sentry/$SENTRY_DEBUG_META_PROPERTIES_OUTPUT"
                    )
                )
                task.withSentryTelemetry(extension, sentryTelemetryProvider)
            }
        }
    }
}
